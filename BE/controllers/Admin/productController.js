const productModel = require("../../models/productsModel");
const categoryModel = require("../../models/categoryModel");
// const commentModel = require("../../models/commentModel"); // ƒê√£ m·ªü l·∫°i
const { Op } = require('sequelize');

// [GET] /products - L·∫•y danh s√°ch s·∫£n ph·∫©m (join danh m·ª•c)
exports.products = async (req, res) => {
  try {
    const data = await productModel.findAll({
      include: [
        {
          model: categoryModel,
          as: "category",
          attributes: ["name"],
          // N·∫øu b·∫°n ch·∫Øc ch·∫Øn b·∫£ng c√≥ `status` th√¨ gi·ªØ d√≤ng d∆∞·ªõi:
          where: { status: 'active' }
        }
      ],
    });
    res.status(200).json({ data });
  } catch (error) {
    console.error("L·ªói l·∫•y s·∫£n ph·∫©m:", error);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m" });
  }
};


// [GET] /products/add - L·∫•y danh m·ª•c ƒë·ªÉ t·∫°o s·∫£n ph·∫©m
exports.addproducts = async (req, res) => {
  try {
    const categories = await categoryModel.findAll({
      where: { status: 'active' },
      attributes: ["id", "name"]
    });
    res.status(200).json({ data: categories });
  } catch (error) {
    console.error("L·ªói l·∫•y danh m·ª•c:", error);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh m·ª•c" });
  }
};

// [POST] /products - T·∫°o s·∫£n ph·∫©m m·ªõi
exports.create = async (req, res) => {
  try {
    const { name, price, short_description, category_id } = req.body;
    const image = req.file ? req.file.filename : null;

    const product = await productModel.create({
      title: name,
      price,
      short_description,
      category_id,
      image,
    });

    res.status(201).json({ message: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!", product });
  } catch (error) {
    console.error("L·ªói t·∫°o s·∫£n ph·∫©m:", error);
    res.status(500).json({ error: `Server error: ${error.message}` });
  }
};

// [GET] /products/edit/:id - L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m ƒë·ªÉ ch·ªânh s·ª≠a
exports.editproductsbyId = async (req, res) => {
  try {
    const productId = req.params.id;
    const product = await productModel.findByPk(productId);

    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." });
    }

    res.status(200).json({ product });
  } catch (error) {
    console.error("L·ªói l·∫•y s·∫£n ph·∫©m ƒë·ªÉ ch·ªânh s·ª≠a:", error);
    res.status(500).json({ error: "L·ªói server!" });
  }
};

// [PUT] /products/:id - C·∫≠p nh·∫≠t s·∫£n ph·∫©m
exports.postEditProduct = async (req, res) => {
  try {
    const productId = req.params.id;
    const { name, price, short_description, category_id, status } = req.body;
    const image = req.file ? req.file.filename : undefined;

    const updateData = {
      title: name,
      price,
      short_description,
      category_id,
      status, // üëà Th√™m d√≤ng n√†y
    };

    if (image) {
      updateData.image = image;
    }

    const updated = await productModel.update(updateData, {
      where: { id: productId },
    });

    if (updated[0] === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t!" });
    }

    const updatedProduct = await productModel.findByPk(productId);
    res.status(200).json({
      message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!",
      product: updatedProduct,
    });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
    res.status(500).json({ message: "L·ªói server!" });
  }
};

// [DELETE] /products/:id - X√≥a s·∫£n ph·∫©m
exports.delete = async (req, res) => {
  try {
    const productId = req.params.id;

    // X√≥a c√°c b·∫£n ghi trong b·∫£ng carts tham chi·∫øu ƒë·∫øn s·∫£n ph·∫©m
    await cartModel.destroy({
      where: { product_id: productId }
    });

    // Sau khi x√≥a c√°c b·∫£n ghi trong carts, ti·∫øp t·ª•c x√≥a s·∫£n ph·∫©m
    const deleted = await productModel.destroy({
      where: { id: productId }
    });

    if (!deleted) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a." });
    }

    res.status(200).json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error.message);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};


// [GET] /products/:id - L·∫•y chi ti·∫øt s·∫£n ph·∫©m
exports.getProductById = async (req, res) => {
  try {
    const id = req.params.id;
    const currentProduct = await productModel.findByPk(id, {
      include: [
        {
          model: categoryModel,
          as: "category",
          attributes: ["id", "name"],
        },
      ],
    });

    if (!currentProduct) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." });
    }

    res.status(200).json(currentProduct);
  } catch (error) {
    console.error("L·ªói l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error.message);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
